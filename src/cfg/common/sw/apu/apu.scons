#-------------------------------------------------------------------------------
#
#    Variant construction script for Zynq-7000 APU bare-metal mode
#
#    Author: Harry E. Zhurov
#
#-------------------------------------------------------------------------------

import os

from pathlib       import Path
from datetime      import datetime
from arm_none_eabi import setup_default_env

#-------------------------------------------------------------------------------
#
#    Utility Functions
#
def make_objects(env, src, dst_dir, ext = 'o'):
    obj = []
    src_base = str( Path(src[0]).parent )

    for s in src:
        o = s.replace(src_base, dst_dir)
        o = drop_suffix(o) + '.' + ext
        obj.append(env.Object(o, s)[0])

    return obj

#---------------------------------------------------------------------
def retreive_linker_script(name, env):

    ld_scripts = read_sources('src_ld.yml')

    src_script = None
    for i in ld_scripts:
        if name + '.ld.S' in i:
            src_script = i
            break

    if not src_script:
        print_error('E: linker script corresponding to target "{}" not specified in config file "src_ld.yml"'.format(name))
        Exit(-1)

    trg_script = str( Path(env['DIRS'].BUILD) / 'src' / (name + '.ld') )

    env['SRC_LINKER_SCRIPT'] = src_script
    env['TRG_LINKER_SCRIPT'] = trg_script

#---------------------------------------------------------------------
def preprocess_linker_script(target, source, env):

    src_script = env['SRC_LINKER_SCRIPT']
    trg_script = env['TRG_LINKER_SCRIPT']

    cmd = env['CPP'] + ' -P -undef ' + src_script + ' ' + trg_script

    #print(cmd)

    rcode, out, err = cexec(cmd)
    out += err
    if out: print( out.replace('`', '\'') )

    if rcode != 0:
        return rcode

#-------------------------------------------------------------------------------
#
#    Main Build Stuff
#
Import(['envx', 'VivadoProject'])

dirs = envx['DIRS']

add_search_path( str( Path(dirs.COMMON) / 'sw' / 'apu' / 'env' ) )

build_root = Path(dirs.BUILD)

#---------------------------------------------------------------------
#
#    Libraries
#
src_embio           = read_sources('src_embio.yml')
src_xil             = read_sources('src_xil.yml')
src_z7lib           = read_sources('src_z7lib.yml')

lib_build_path      = build_root / 'sw' / 'apu' / 'lib'

embio_obj_path      = lib_build_path / 'obj' / 'embio'
xil_obj_path        = lib_build_path / 'obj' / 'xil'
z7lib_obj_path      = lib_build_path / 'obj' / 'z7lib'


#---------------------------------------------------------------------
#
#    Bootloader Settings
#
src_bl            = read_sources('src_apu_bl.yml')
src_gen           = [str(build_root / 'src' / 'ps7_init.c')]

bl_build_path     = build_root / 'sw' / 'apu' / 'bl'
bl_obj_path       = bl_build_path / 'obj'

Depends(src_bl,  VivadoProject)
Depends(src_gen, VivadoProject)

#---------------------------------------------------------------------
#
#    Camera Program Settings
#
src_cam           = read_sources('src_apu_cam.yml')
cam_build_path    = build_root / 'sw' / 'apu' / 'cam'
cam_obj_path      = cam_build_path / 'obj'

Depends(src_cam,  VivadoProject)

#---------------------------------------------------------------------
#
#    Tool Options
#
CPU          = 'cortex-a9'

Optimization ='-O2'
DebugLevel   ='-g3'          # empty to disable debug info

BUILD_DATE = datetime.now().strftime('%Y-%m-%d')
BUILD_TIME = datetime.now().strftime('%H:%M:%S')

setup_default_env(envx)

FLAGS = []
FLAGS.append('-mcpu=' + CPU)
FLAGS.append('-mtune=cortex-a9')
FLAGS.append('-mfloat-abi=hard')
FLAGS.append('-mfpu=vfpv3')
FLAGS.append(Optimization)
FLAGS.append(DebugLevel)

envx.Prepend(ASFLAGS   = FLAGS)
envx.Prepend(CFLAGS    = FLAGS)
envx.Prepend(CXXFLAGS  = FLAGS)

envx.Append(CPPPATH = ['#lib/ps7mmr/const',
                       '#lib/z7lib',
                       '#lib/xil',
                       '#src/sw/include',
                       str(build_root / 'src')])

envx.Append(LIBPATH = lib_build_path)
envx.Append(LIBS = ['embio', 'xil', 'z7lib'])

#-----------------------------------------------------------
#
#    Bootloader-specific Construction Environment
#
envbl = envx.Clone()
envbl.Append (LINKFLAGS = FLAGS.copy())
retreive_linker_script('bl', envbl)
envbl.Append(LINKFLAGS = '-T' + envbl['TRG_LINKER_SCRIPT'])

#-----------------------------------------------------------
#
#    Camera Program Construction Environment
#
envx.Append (LINKFLAGS = FLAGS.copy())
retreive_linker_script('cam', envx)
envx.Append(LINKFLAGS = '-T' + envx['TRG_LINKER_SCRIPT'])

#---------------------------------------------------------------------
#
#    Build Targets
#

#-----------------------------------------------------------
#
#    Libraries
#
obj_embio = make_objects(envx, src_embio, str(embio_obj_path))
obj_xil   = make_objects(envx, src_xil,   str(xil_obj_path))
obj_z7lib = make_objects(envx, src_z7lib, str(z7lib_obj_path))

libembio = envx.StaticLibrary(str(lib_build_path / 'embio'), obj_embio)
libxil   = envx.StaticLibrary(str(lib_build_path / 'xil'),   obj_xil)
libz7lib = envx.StaticLibrary(str(lib_build_path / 'z7lib'), obj_z7lib)

#-----------------------------------------------------------
#
#    Bootloader
#
bl_obj  = make_objects(envx, src_bl,  str(bl_obj_path))
bl_obj += make_objects(envx, src_gen, str(bl_obj_path))

bl = envbl.Program(str(bl_build_path / 'bl'), bl_obj)
envbl.AddPreAction(bl, preprocess_linker_script)
Depends(bl, envbl['SRC_LINKER_SCRIPT'])

#-----------------------------------------------------------
#
#    Camera Program
#
cam_obj  = make_objects(envx, src_cam,  str(cam_obj_path))

cam = envx.Program(str(cam_build_path / 'cam'), cam_obj)
envx.AddPreAction(cam, preprocess_linker_script)
Depends(cam, envx['SRC_LINKER_SCRIPT'])

Return('bl', 'cam')

#-------------------------------------------------------------------------------

